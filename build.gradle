plugins {
	id 'java'
	id 'groovy'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.cyclonedx.bom' version '1.10.0'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'org.moe.fintech'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('sentryVersion', "8.3.0")
	set('springBootAdminVersion', "3.4.5")
	set('springCloudVersion', "2024.0.0")
	set('springModulithVersion', "1.3.3")
}

dependencies {
	implementation 'org.jmolecules:jmolecules-hexagonal-architecture'
	implementation 'org.apache.commons:commons-collections4:4.4'
	implementation 'org.apache.commons:commons-lang3:3.17.0'
	implementation 'org.jmolecules:jmolecules-layered-architecture'
	implementation 'org.jmolecules.integrations:jmolecules-ddd-integration'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'de.codecentric:spring-boot-admin-starter-client'
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	implementation 'io.sentry:sentry-spring-boot-starter-jakarta'
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.modulith:spring-modulith-starter-core'
	implementation 'org.springframework.modulith:spring-modulith-starter-jdbc'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'org.springframework.modulith:spring-modulith-actuator'
	runtimeOnly 'org.springframework.modulith:spring-modulith-observability'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.modulith:spring-modulith-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'net.datafaker:datafaker:2.3.0'
	testImplementation 'org.spockframework:spock-core:2.3-groovy-4.0'
	testImplementation 'org.spockframework:spock-spring:2.3-groovy-4.0'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
		mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
		mavenBom "io.sentry:sentry-bom:${sentryVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom 'org.jmolecules:jmolecules-bom:2023.1.7'
	}
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}
